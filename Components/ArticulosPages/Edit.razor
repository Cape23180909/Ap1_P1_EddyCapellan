@page "/Articulos/Edit/{ArticuloId:int}"
@inject ArticuloService articuloService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<EditForm Model="articulo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <Toasts class="p-3" Messages="MensajeToast" Placement="ToastsPlacement.TopRight" />

    <div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
        <div class="card-header bg-primary text-white" style="text-align: center;">
            <h3> <i class="fas fa-clipboard-list"></i> Modificar artículos</h3>
        </div>
        <div class="card-body">

            <!-- ArticuloId -->
            <div class="mb-3">
                <label for="ArticuloId" class="form-label">ArticuloId:</label>
                <InputNumber @bind-Value="articulo.ArticuloId" class="form-control" aria-describedby="BotonBuscar" />
            </div>

            <!-- Descripcion -->
            <div class="mb-3">
                <label for="Descripcion" class="form-label">Descripción:</label>
                <InputText @bind-Value="articulo.Descripcion" class="form-control" />
                <ValidationMessage For="@(() => articulo.Descripcion)" />
            </div>

            <!-- Costo -->
            <div class="mb-3">
                <label for="Costo" class="form-label">Costo:</label>
                <InputNumber @bind-Value="articulo.Costo" class="form-control" />
                <ValidationMessage For="@(() => articulo.Costo)" />
            </div>

            <!-- Ganancia -->
            <div class="mb-3">
                <label for="Ganancia" class="form-label">Ganancia:</label>
                <InputNumber @bind-Value="articulo.Ganancia" class="form-control" />
                <ValidationMessage For="@(() => articulo.Ganancia)" />
            </div>

            <!-- Precio -->
            <div class="mb-3">
                <label for="Precio" class="form-label">Precio:</label>
                <InputNumber @bind-Value="articulo.Precio" class="form-control" />
                <ValidationMessage For="@(() => articulo.Precio)" />
            </div>
        </div>

        <div class="card-footer bg-light d-flex justify-content-center mt-3">
            <div class="btn-group">
                <button class="btn btn-outline-primary" @onclick="Nuevo"><i class="fa fa-plus"></i> Nuevo</button>
                <button class="btn btn-outline-success" type="submit"><i class="fa fa-save"></i> Guardar</button>
                <a href="/Articulos/Index" class="btn btn-outline-secondary"><i class="fa fa-arrow-left"></i> Volver</a>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int ArticuloId { get; set; }
    List<ToastMessage> MensajeToast = new List<ToastMessage>();
    public Articulos articulo { get; set; } = new Articulos();
    private bool Existe = false;

    protected override async Task OnInitializedAsync()
    {
        if (ArticuloId != 0)
        {
            await Buscar();
        }
    }

    public void Nuevo()
    {
        articulo = new Articulos();
        Existe = false;
    }

    public async Task Buscar()
    {
        Existe = false;
        var ArticuloEncontrado = await articuloService.Buscar(ArticuloId);

        if (ArticuloEncontrado != null)
        {
            articulo = ArticuloEncontrado;
            Existe = true;
        }
        else
        {
            await Mensaje(ToastType.Warning, "No se encontró el artículo con el ID especificado.");
            Nuevo();
        }
    }

    public async Task Guardar()
    {
        if (Existe)
        {
            var actualizado = await articuloService.Modificar(articulo);
            if (actualizado)
            {
                await Mensaje(ToastType.Success, "El artículo se ha modificado con éxito. Puedes dar click en el botón retroceder.");
                Nuevo();
            }
            else
            {
                await Mensaje(ToastType.Danger, "Ocurrió un error al actualizar el artículo.");
            }
        }
        else
        {
            var guardado = await articuloService.Guardar(articulo);
            if (guardado)
            {
                await Mensaje(ToastType.Success, "El artículo se ha guardado con éxito.");
                Nuevo();
            }
            else
            {
                await Mensaje(ToastType.Danger, "Ocurrió un error al guardar el artículo.");
            }
        }
    }

    public async Task Eliminar()
    {
        var eliminado = await articuloService.Eliminar(articulo.ArticuloId);
        if (eliminado)
        {
            await Mensaje(ToastType.Success, "El artículo se ha eliminado correctamente.");
            Nuevo();
        }
        else
        {
            await Mensaje(ToastType.Danger, "Ocurrió un error al eliminar el artículo.");
        }
    }

    public async Task<bool> Validar()
    {
        var listaArticulos = await articuloService.Listar(a => a.Descripcion.ToLower() == articulo.Descripcion.ToLower() && a.ArticuloId != articulo.ArticuloId);
        Existe = listaArticulos.Any();
        return Existe;
    }

    private ToastMessage CreateToastMessage(ToastType toastType, string mensaje)
        => new ToastMessage
            {
                Type = toastType,
                Title = "Notificación",
                HelpText = $"{DateTime.Now}",
                Message = mensaje,
            };

    private async Task Mensaje(ToastType toastType, string mensaje)
    {
        MensajeToast.Add(CreateToastMessage(toastType, mensaje));
        await InvokeAsync(StateHasChanged);
    }
}